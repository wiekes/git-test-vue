{"version":3,"file":"vue.js","sources":["../src/utils.js","../src/globalAPI.js","../src/compiler/parse.js","../src/compiler/index.js","../src/vdom/index.js","../src/observe/dep.js","../src/observe/watcher.js","../src/observe/lifecycle.js","../src/observe/array.js","../src/observe/index.js","../src/state.js","../src/init.js","../src/index.js"],"sourcesContent":["// 静态方法\r\nconst strats = {};\r\nconst LIFECYCLE = [\r\n    'beforeCreate',\r\n    'created'\r\n];\r\nLIFECYCLE.forEach(hook => {\r\n    strats[hook] = function (p, c) {\r\n        if (c) {  // 如果儿子 有 父亲有 让父亲和儿子拼在一起\r\n            if (p) {\r\n                return p.concat(c)\r\n            } else {\r\n                return [c]; // 儿子有父亲没有,则将儿子包装成数组\r\n            }\r\n        } else {\r\n            return p; // 如果儿子没有则用父亲即可\r\n        }\r\n    }\r\n})\r\nexport function mergeOptions(parent, child) {\r\n\r\n    const options = {};\r\n    // const options = {...parent,..child}; 过于暴力 而且覆盖\r\n    for (let key in parent) {   // 循环老的\r\n        mergeField(key);\r\n    }\r\n    for (let key in child) {  // 循环新的\r\n        if (!parent.hasOwnProperty(key)) {\r\n            mergeField(key);\r\n        }\r\n    }\r\n    function mergeField(key) {\r\n        // 策略模式 用策略模式减少if / else\r\n        if (strats[key]) {\r\n            options[key] = strats[key](parent[key], child[key])\r\n        } else {\r\n            // 如果不再策略中则以儿子为主\r\n            options[key] = child[key] || parent[key]; // 优先采用儿子,再采用父亲\r\n        }\r\n    }\r\n    return options;\r\n}\r\n","import { mergeOptions } from \"./utils\";\r\n\r\n\r\nexport function initGlobalAPI(Vue) {\r\n    \r\n    Vue.options = {};\r\n    \r\n    Vue.mixin = function (mixin) {\r\n        // 我们期待囧用户的选项 和全局的options进行合并\r\n\r\n        // {} {created:function(){}}  => {creeated:[fn]}  第一次用空的{}的对象 和 用户传入的created:function进行混合\r\n\r\n        // {created:[fn]}  {created:function(){}} => {created:[fn,fn]  第二次也是将用户第二次传入的与前一次混合的与这一次的加入的混合\r\n        this.options = mergeOptions(this.options, mixin)\r\n        return this;\r\n    }\r\n\r\n}","const ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`;\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`;\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`); // 他配置到的分组是一个 标签名 <xxx 匹配到开始标签的名字\r\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`); // 匹配的是 </xxx> 最终匹配到的分组就是结束背签的名字\r\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;  // 匹配属性\r\n// 第一个分组就是属性的key value 就是 分组3.分组4/分组5\r\nconst startTagClose = /^\\s*(\\/?)>/;  // <div> <br/>\r\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;  // {{ dddd}} 匹配到的内容就是我们表达式的变量\r\n\r\n// vue3 采用的不是正则\r\n\r\n// 对模板进行编译处理\r\n\r\n\r\n\r\nexport function parseHTML(html) {\r\n\r\n    let ElEMENT_TYPE = 1;\r\n    let TEXT_TYPE = 3;\r\n    let stack = []; // 用于存放元素\r\n    let currentParent; // 指向的是栈中的最后一个\r\n    let root;\r\n    // 最终转化成一个抽象语法树\r\n\r\n    function createASTElement(tag, attrs) {\r\n        return {\r\n            tag,\r\n            type: ElEMENT_TYPE,\r\n            children: [],\r\n            attrs,\r\n            parent: null\r\n        }\r\n    }\r\n    function start(tag, attrs) {\r\n        let node = createASTElement(tag, attrs);\r\n        if (!root) { // 看一下是否是空树\r\n            root = node  // 如果为空则当前是树的根节点\r\n        }\r\n        if (currentParent) {\r\n            node.parent = currentParent; // 值赋予了parent属性\r\n            currentParent.children.push(node); // 还需要让父亲记住自己\r\n        }\r\n        stack.push(node);\r\n        currentParent = node;  // currentParent为栈中的最后一个\r\n\r\n    }\r\n    function chars(text) {  // 文本直接放到当前指向的节点中\r\n        text = text.replace(/\\s/g, '');\r\n        text && currentParent.children.push({\r\n            type: TEXT_TYPE,\r\n            text,\r\n            parent: currentParent\r\n        });\r\n        // console.log(text, '文本');\r\n    }\r\n    function end(tag) {\r\n        let node = stack.pop(); // 弹出最后一个，校验标签是否合法\r\n        currentParent = stack[stack.length - 1]\r\n        // console.log(tag, '结束');\r\n    }\r\n\r\n    function advance(n) {\r\n        html = html.substring(n);\r\n    }\r\n    function parseStartTag() {\r\n        const start = html.match(startTagOpen)\r\n        if (start) {\r\n            const match = {\r\n                tagName: start[1], // 标签名\r\n                attrs: []\r\n            }\r\n            advance(start[0].length)\r\n\r\n            // 如果不是开始标签就一直匹配下去\r\n            let attr, end;\r\n            while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\r\n                advance(attr[0].length);\r\n                match.attrs.push({ name: attr[1], value: attr[3] || attr[4] || attr[5] || true })\r\n\r\n            }\r\n\r\n            if (end) {\r\n                advance(end[0].length)\r\n            }\r\n            return match;\r\n        }\r\n        // console.log(html);\r\n        return false;  // 不是开始标签\r\n    }\r\n    while (html) {\r\n        // 如果textEnd 为0 说明是一个开始标签或者结束标签\r\n        // 如果textEnd >0 说明就是文本的结束位置\r\n        let textEnd = html.indexOf('<'); // 如果indexOf中索引是0 则说明是个标签\r\n\r\n        if (textEnd == 0) {\r\n            const startTagMatch = parseStartTag();  // 开始标签的匹配结果\r\n\r\n            if (startTagMatch) {  // 解析到开始标签\r\n                // console.log(startTagMatch);\r\n                // console.log(html);\r\n                start(startTagMatch.tagName, startTagMatch.attrs)\r\n                continue\r\n                // break\r\n            }\r\n            let endTagMatch = html.match(endTag);\r\n            if (endTagMatch) {\r\n                advance(endTagMatch[0].length);\r\n                end(endTagMatch[0])\r\n                continue\r\n            }\r\n\r\n        }\r\n\r\n        if (textEnd > 0) {\r\n            let text = html.substring(0, textEnd); //本文内容\r\n            if (text) {\r\n                // console.log(\"text\",text);\r\n                chars(text)\r\n                advance(text.length);   // 解析到的文本\r\n\r\n                // console.log(html);\r\n            }\r\n        }\r\n\r\n    }\r\n    // console.log(html, 'html end');\r\n    // console.log(root);\r\n    return root;\r\n}","import { parseHTML } from \"./parse\"\r\n\r\n\r\nfunction genProps(attrs) {\r\n    let str = '' // {name, value}\r\n    for (let i = 0; i < attrs.length; i++) {\r\n        let attr = attrs[i];\r\n        if (attr.name === 'style') {\r\n            // color:red;background:red => {color:'red'}\r\n            let obj = {};\r\n            attr.value.split(';').forEach(item => {\r\n                let [key, value] = item.split(':');\r\n                obj[key] = value\r\n            });\r\n            attr.value = obj\r\n        }\r\n\r\n        str += `${attr.name}:${JSON.stringify(attr.value)},`   // a:b,c:d\r\n    }\r\n    return `{${str.slice(0, -1)}}`\r\n}\r\n\r\n// 可能是文本也可能是元素\r\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;  // {{ dddd}} 匹配到的内容就是我们表达式的变量\r\nfunction gen(node) {\r\n    if (node.type === 1) {\r\n        // 元素\r\n        return codegen(node);\r\n    } else {\r\n        // 文本\r\n        let text = node.text;\r\n        // console.log(defaultTagRE.test(text));\r\n        if (!defaultTagRE.test(text)) {\r\n            // 不含变量的情况 {{name}}\r\n            return `_v(${JSON.stringify(text)})`\r\n        } else {\r\n            // 含变量的情况\r\n            // _v(_s(name)+'hello'+_s(name))\r\n            let tokens = [];\r\n            let match;\r\n            defaultTagRE.lastIndex = 0;\r\n            let lastIndex = 0\r\n            while (match = defaultTagRE.exec(text)) {\r\n                // console.log(match,'ooooooo');\r\n                let index = match.index;  // 匹配的位置\r\n                // console.log(index, 'dd');\r\n                if (index > lastIndex) {\r\n                    tokens.push(JSON.stringify(text.slice(lastIndex, index)))\r\n                }\r\n                tokens.push(`_s(${match[1].trim()})`)  // trim 去空格\r\n                lastIndex = index + match[0].length\r\n            }\r\n            if (lastIndex < text.length) {\r\n                tokens.push(JSON.stringify(text.slice(lastIndex)));\r\n            }\r\n            // console.log(tokens);\r\n            return `_v(${tokens.join('+')})`\r\n        }\r\n        // console.log(node);\r\n    }\r\n}\r\n\r\nfunction genChildren(children) {\r\n    return children.map(child => gen(child)).join(',');\r\n}\r\n\r\nfunction codegen(ast) {\r\n    let children = genChildren(ast.children)\r\n    let code = (`_c('${ast.tag}',${ast.attrs.length > 0 ? genProps(ast.attrs) : 'null'}${ast.children.length ? `,${children}` : ''})`)\r\n\r\n    return code\r\n}\r\n\r\nexport function compileToFunction(template) {\r\n\r\n    // 1.就是将template 转化成ast语法树\r\n    let ast = parseHTML(template)\r\n    // 2.生成render方法 (render方法执行后的返回的结果就是 虚拟DOM)\r\n    // console.log(template);\r\n    // console.log(ast);\r\n\r\n    // console.log(codegen(ast));\r\n\r\n    // 模板引擎的实现原理 就是 with + new Function\r\n\r\n    let code = codegen(ast);\r\n    // console.log(code);\r\n    code = `with(this){return ${code}}`;\r\n    // 使用with() 将对象属性直接变成with作用域下的变量\r\n    let render = new Function(code); // 根据代码生成render函数\r\n    // console.log(render.toString());\r\n    \r\n    return render;\r\n}","\r\n// h() _c()\r\nexport function createElementVNode(vm,tag,data, ...children){\r\n    if(data == null){\r\n        data = {}\r\n    }\r\n    let key = data.key;\r\n    if(key){\r\n        delete data.key\r\n    }\r\n    return vnode(vm,tag,key,data,children);\r\n}\r\n\r\n// _v();\r\n\r\nexport function createTextVNode(vm,text){\r\n    return vnode(vm,undefined,undefined,undefined,undefined,text);\r\n}\r\n\r\n// _s()\r\n\r\n\r\n\r\n// ast 做的事语法层面的转化 他描述的语法本身  （可以描述js css html）\r\n// 我们的虚拟DOM 是描述的dom元素，可以增加一些自定义的属性  （描述dom的）\r\nfunction vnode(vm,tag,key,data,children,text){\r\n    return {\r\n        vm,\r\n        tag,\r\n        key,\r\n        data,\r\n        children,\r\n        text\r\n        // ...\r\n    }\r\n}\r\n\r\n\r\n","\r\nlet id = 0;\r\n\r\nclass Dep {\r\n    constructor() {\r\n        this.id = id++;  // 属性的dep要收集watcher\r\n        this.subs = []; // 这里存放着当前，属性对应的watcher有哪些\r\n    }\r\n\r\n    depend() {\r\n        // 这里不希望放置重复的watcher，而且刚才只是一个单向的关系 dep => watcher\r\n        // watcher 记录dep\r\n        // this.subs.push(Dep.target);\r\n\r\n        Dep.target.addDep(this);  // 让watcher 记住dep\r\n\r\n        // dep 和 watcher 是一个多对多的关系 （一个属性可以在多个组件中使用 dep -> 多个watcher）\r\n        // 一个组件中由多个属性组成 （一个watcher 对应多个dep）\r\n    }\r\n    addSub(watcher) {\r\n\r\n        this.subs.push(watcher); // 有计算属性watcher现存 其次是渲染watcher  先执行计算属性watcher 在执行渲染属性watcher\r\n    }\r\n    notify() {\r\n        this.subs.forEach(watcher => {\r\n            watcher.update()\r\n            // console.log(watcher);\r\n        }); // 告诉watcher要更新了\r\n    }\r\n}\r\n\r\n\r\n// 计算属性computed的队列   \r\n\r\n// 第一的watcher是渲染是触发的 进入 \r\n// 第二次是因为第一次渲染的取值操作触发的计算computed watcher\r\n// data. 属性记录的是计算属性的watcher而不是渲染属性的watcher因为直接渲染没有调用data的属性没有触发get => dep.depend() 所有dep.subs没记录 \r\n\r\nDep.target = null;\r\n\r\nlet stack = [];\r\n\r\nexport function pushTarget(watcher) {\r\n    stack.push(watcher);\r\n    Dep.target = watcher;\r\n}\r\n\r\nexport function popTarget() {\r\n    stack.pop();\r\n    Dep.target = stack[stack.length - 1];\r\n}\r\n\r\nexport default Dep;\r\n","import Dep, { popTarget, pushTarget } from \"./dep\";\r\n\r\nlet id = 0;\r\n\r\n// 组件优点  复用 维护简单 局部更新\r\n\r\n// 1) 当前我们创建渲染watcher的时候会把当前的渲染watcher放在Dep.target上\r\n// 2） 调用_render() 会取值 走get\r\n\r\n// 每个属性有一个dep (属性就是悲观者)， watcher就是观察者（属性变化了就会通知观察者来更新）  -> 观察者模式\r\n\r\nclass Watcher {  // 不同组件有不同的watcher 目前只有一个 渲染实例的\r\n    constructor(vm, exprOrFn, options,cb) {\r\n        this.id = id++;\r\n        this.renderWatcher = options;  // 是一个渲染watcher\r\n\r\n        if(typeof exprOrFn === 'string'){\r\n            this.getter = function(){\r\n                return vm[exprOrFn]\r\n            }\r\n        }else{\r\n            this.getter = exprOrFn; // getter意味着调用这个函数可以发生取值操作\r\n        }\r\n\r\n        this.deps = [];  // 组件卸载   后续实现计算属性，和一些清理工作需要用到\r\n        this.depsId = new Set();\r\n        this.cb = cb;\r\n        this.lazy = options.lazy;\r\n        this.dirty = this.lazy;  // 缓存值\r\n        this.vm = vm;\r\n\r\n        this.user = options.user; // 标识是否是用户自己的watcher\r\n\r\n        this.value = this.lazy ? undefined : this.get();\r\n\r\n    }\r\n\r\n    addDep(dep) {  // 一个组件即一个视图 对应着多个属性 重复的属性也不用记录\r\n        let id = dep.id;\r\n        if (!this.depsId.has(id)) {\r\n            this.deps.push(dep);\r\n            this.depsId.add(id);\r\n            dep.addSub(this); // watcher已经记住了dep了而且已经去重了， 此时让dep也记住watcher\r\n        }\r\n    }\r\n\r\n    evaluate(){\r\n        // debugger\r\n        this.value = this.get(); // 获取到用户函数的的返回值 并且还标识为脏\r\n        this.dirty = false;\r\n    }\r\n\r\n    get() {\r\n        pushTarget(this)  // 静态属性就是只有一份\r\n        let value = this.getter.call(this.vm);  // 会去vm上取值  vm.update(vm._render())\r\n        popTarget() // 渲染完毕就清空   单线程 先挂载使用后 清空\r\n        return value\r\n    }\r\n\r\n    depend(){ // watcher 的depend 就是让watcher的dep去调用depend()\r\n        let i = this.deps.length;\r\n\r\n        while(i--){\r\n            // dep.depand()\r\n            this.deps[i].depend(); // 让计算属性watcher 也收集渲染watcher  dep里面的depend\r\n        }\r\n    }\r\n    update() {\r\n        // console.log('update');\r\n        if(this.lazy){\r\n            // 如果是计算属性 依赖的值发生变化 就标识计算属性是脏值\r\n            this.dirty = true;\r\n        }else{\r\n            queueWatcher(this);  // 把当前的watcher 暂存起来\r\n            // this.get(); // 重新渲染\r\n        }\r\n        \r\n    }\r\n    run() {\r\n        // console.log('run');\r\n        let oldValue = this.value;\r\n        let newValue = this.get();\r\n        if(this.user){\r\n            this.cb.call(this.vm,newValue,oldValue);\r\n        }\r\n    }\r\n}\r\n\r\nlet queue = [];\r\nlet has = {};\r\nlet pending = false;  // 防抖\r\n\r\nfunction flushSchedulerQueue() {\r\n    let flushQueue = queue.slice(0);\r\n    queue = [];\r\n    has = {};\r\n    pending = false;   // 一轮改变之后的恢复\r\n    flushQueue.forEach(q => q.run());  // 在刷新的过程中可能还有新的watcher,重新放到queue中\r\n}\r\n\r\nfunction queueWatcher(watcher) {\r\n    const id = watcher.id;\r\n    if (!has[id]) {\r\n        queue.push(watcher);\r\n        has[id] = true;\r\n        // 不管我们的update执行多少次，但是最终只执行一轮刷新操作\r\n        if (!pending) {\r\n            nextTick(flushSchedulerQueue)\r\n            pending = true;\r\n        }\r\n    }\r\n}\r\n\r\n// 使用队列将多次执行合并成一次 变量 开个异步   变成批处理\r\nlet callbacks = [];\r\nlet waiting = false;\r\nfunction flushCallbacks() {\r\n    let cbs = callbacks.slice(0);    // 代码先写 声明变量 之后赋值 再函数操作\r\n    // console.log(123,vm.name);\r\n    // console.log(app.innerHTML);\r\n    waiting = true;\r\n    callbacks = [];\r\n    cbs.forEach(cb => cb());    // 按照顺序依次执行\r\n}\r\n\r\n// nextTick 没有直接使用某个api而是采用优雅降级的方式\r\n// 内部先采用的是promise (ie不兼容)  MutationObserver(h5的api) 可以考虑ie专享的 setImmediate setTimeout\r\n\r\n// let timerFunc;\r\n\r\n// if (Promise) {\r\n//     timerFunc = () => {\r\n//         Promise.resolve().then(flushCallbacks)\r\n//         console.log(1);\r\n//     }\r\n// } else if (MutationObserver) {\r\n//     let observer = new MutationObserver(flushCallbacks); // 这里传入的是回调是异步执行的\r\n//     let textNode = document.createTextNode(1);\r\n//     observer.observe(textNode, {\r\n//         CharacterData: true\r\n//     });\r\n//     timerFunc = () => {\r\n//         textNode.textContent = 2;\r\n//     }\r\n// } else if (setImmediate) {\r\n//     timerFunc = () => {\r\n//         setImmediate(flushCallbacks);\r\n//     }\r\n// } else {\r\n//     timerFunc = () => {\r\n//         setTimeout(flushCallbacks);\r\n//     }\r\n// }\r\n\r\nexport function nextTick(cb) {\r\n    callbacks.push(cb);\r\n    if (!waiting) {\r\n        // setTimeout(() => {\r\n        //     flushCallbacks();  // 最后一起刷新\r\n        // }, 0)\r\n        // timerFunc();\r\n        Promise.resolve().then(flushCallbacks);\r\n        waiting = true;\r\n    }\r\n}\r\n\r\n// 需要给每个属性增加一个dep，目的就是收集watcher\r\n\r\n// 一个视图中 有多少个属性 （n个属性会对应一个视图）n个dep对应一个watcher\r\n// 1个视图 对应着多个视图      一个视图就是一个组件\r\n// 多对多的关系\r\n\r\nexport default Watcher","import { createElementVNode, createTextVNode } from \"../vdom\";\r\nimport Watcher from \"./watcher\";\r\n\r\nfunction createElm(vnode) {\r\n    let { tag, data, children, text } = vnode;\r\n    if (typeof tag === 'string') {  // 标签\r\n        vnode.el = document.createElement(tag); // 这里将真实节点和虚拟节点对应起来，后续如果修改属性  就可以通过虚拟节点找到真实节点修改\r\n\r\n        patchProps(vnode.el, data);\r\n\r\n        children.forEach(child => {   // 数据递归\r\n            vnode.el.appendChild(createElm(child))\r\n        });\r\n    } else {\r\n        vnode.el = document.createTextNode(text);\r\n    }\r\n    return vnode.el\r\n}\r\n\r\n// 更新属性\r\nfunction patchProps(el, props) {\r\n    for (let key in props) {\r\n        if (key === 'style') {\r\n            for (let styleName in props.style) {\r\n                el.style[styleName] = props.style[styleName];\r\n            }\r\n        } else {\r\n            el.setAttribute(key, props[key])\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction patch(oldVNode, vnode) {\r\n    // 初始化渲染流程\r\n    // debugger\r\n\r\n    const isRealElement = oldVNode.nodeType;   // .nodeType原生方法\r\n    // console.log(oldVNode, vnode);\r\n    if (isRealElement) {\r\n        const elm = oldVNode;  // 获取真实元素\r\n        // console.log(elm);\r\n        const parentElm = elm.parentNode; // 拿到父元素\r\n        // console.log(parentElm);\r\n        let newElm = createElm(vnode);\r\n        // console.log('new',newElm);\r\n\r\n        parentElm.insertBefore(newElm, elm.nextSibling);  // 插入后删除\r\n        parentElm.removeChild(elm); // 删除老节点\r\n        return newElm\r\n    } else {\r\n        // diff算法\r\n    }\r\n}\r\n\r\nexport function initLifeCycle(Vue) {\r\n    Vue.prototype._update = function (vnode) {  // 将vnode 转化成真是dom\r\n        const vm = this;\r\n        const el = vm.$el;\r\n\r\n        // patch既有初始化的功能 又有更新\r\n        // patch(el, vnode);\r\n        vm.$el = patch(el,vnode)\r\n    }\r\n\r\n    // _c('div',{},...children)\r\n    Vue.prototype._c = function () {\r\n        return createElementVNode(this, ...arguments)\r\n\r\n    }\r\n    // _v(text)\r\n    Vue.prototype._v = function () {\r\n        return createTextVNode(this, ...arguments)\r\n    }\r\n\r\n    Vue.prototype._s = function (value) {\r\n        // debugger\r\n        if (typeof value !== 'object') return value;\r\n        return JSON.stringify(value)\r\n    }\r\n    Vue.prototype._render = function () {\r\n\r\n        // 当渲染的时候会去实例中取值，找到就可以将属性和试图绑定在一起\r\n\r\n        // console.log('render');\r\n        const vm = this;\r\n        // 让with中的this指向vm\r\n        // debugger\r\n        // console.log(); \r\n        return vm.$options.render.call(vm); // 通过ast语法转义后生成的render方法\r\n\r\n    }\r\n}\r\n\r\nexport function mountComponent(vm,el) {  // 这里的el是通过querySelector处理过的 options里的el是没处理过的\r\n\r\n    vm.$el = el;\r\n\r\n    // 1.调用render方法产生虚拟节点 虚拟DOM\r\n    // debugger\r\n\r\n    const updateComponent = () =>{\r\n        vm._update(vm._render());  // vm.$options.render()  虚拟节点\r\n    }\r\n    \r\n    const watcher = new Watcher(vm,updateComponent,true); // true用于表识是一个渲染watcher\r\n    // console.log(watcher);\r\n    // 2.根据虚拟DOM产生真实DOM\r\n\r\n    // 3.插入到el元素中\r\n}\r\n\r\n\r\n// vue核心流程 1） 创造了响应式数据 2） 模板转换成ast语法树\r\n// 3） 将ast语法树转换了render函数  4） 后续每次数据更新可以只执行render函数 （无需再次执行ast转化的过程）\r\n\r\n// render函数会产生虚拟节点 （使用响应式数据）\r\n// 根据生成的虚拟节点创造真实的DOM\r\n\r\nexport function callHook(vm,hook){\r\n    const handlers = vm.$options[hook];\r\n    if(handlers){\r\n        handlers.forEach(handler=>{handler.call(vm)})\r\n    }\r\n}","// 重新数组的部分方法\r\n\r\n\r\nlet oldArrayProto = Array.prototype; // 获取数组的原型\r\n\r\n// newArrayProto.__proto__ = oldArrayProto\r\nexport let newArrayProto = Object.create(oldArrayProto);\r\n\r\nlet methods = [  // 找到所有变异方法\r\n    'push',\r\n    'pop',\r\n    'shift',\r\n    'unshift',\r\n    'reverse',\r\n    'sort',\r\n    'splice'\r\n]  // concat slice 都不会改变原数组 只有上面七个方法会改变数组\r\n\r\nmethods.forEach(method => {\r\n    newArrayProto[method] = function (...args) {  // 这里重新数组方法\r\n\r\n        const result = oldArrayProto[method].call(this, ...args);  // 内部调用原来的方法，函数的劫持 切片编程\r\n        // console.log(\"method\", method);\r\n\r\n        // 我们需要对新增的 数据再次进行劫持\r\n        let inserted;\r\n        let ob = this.__ob__;\r\n        switch (method) {\r\n            case 'push':\r\n            case 'unshift':   // arr.unshift(1,2,3)\r\n                inserted = args;\r\n                break;\r\n            case 'splice': // arr.splice(0,1,{a:1},{a:1})\r\n                inserted = args.slice(2)\r\n            default:\r\n                break;\r\n        }\r\n        if(inserted){\r\n            ob.observeArray(inserted);\r\n        }\r\n\r\n        ob.dep.notify(); // 数组变化了通知对应的watcher实现更新逻辑\r\n        return result\r\n    }\r\n})\r\n","import { newArrayProto } from \"./array\";\r\nimport Dep from \"./dep\";\r\n\r\nclass Observer {\r\n    constructor(data) {\r\n\r\n        // 给每个对象对增加收集功能\r\n        this.dep = new Dep(); // 所有对象都要增加dep\r\n\r\n\r\n        // Object.defineProperty只能劫持已经存在的属性，后增的或者删除的不知道 （vue里面会为此单独写一些api $set $delete）\r\n        \r\n        Object.defineProperty(data, '__ob__',{\r\n            value:this,\r\n            enumerable:false  // 将__ob__变成不可枚举 （循环的时候无法获取到）\r\n        })\r\n\r\n        // data.__ob__ = this // 数据加了一个__ob__则说明这个属性被观测过了\r\n\r\n        if (Array.isArray(data)) {\r\n            // 这里我们可以重写数组中的方法 7个变异方法 是可以修改数组本身\r\n\r\n            // data.__proto__ = ?  直接重写会导致数组原有的方法 丢失 需要保留数组原有的特性，并且可以重新部分方法\r\n\r\n            data.__proto__ = newArrayProto // 需要保留数组原有特性，并且可以重写部分方法\r\n\r\n            this.observeArray(data);  // 数组中的存放对象 可以监控到对象的变化\r\n        } else {\r\n            this.walk(data);\r\n        }\r\n\r\n    }\r\n    walk(data) {  // 循环对象 对属性依次劫持\r\n\r\n        // ”重新定义“属性  性能差\r\n        Object.keys(data).forEach(key => defineReactive(data, key, data[key]))  // 将属性变为响应   定义成响应式  \r\n    }\r\n    observeArray(data) {  // 观测数组\r\n        data.forEach(item =>{\r\n            observe(item)\r\n        })\r\n    }\r\n}\r\n\r\n// 深层次嵌套会递归,递归多了性能差,不存在的属性监控不到,存在的属性要重写方法 vue3-> proxy\r\nfunction dependArray(value){\r\n    for(let i=0;i<value.length;i++){\r\n        let current = value[i];\r\n        current.__ob__ && current.__ob__.dep.depend();\r\n        if(Array.isArray(current)){\r\n            dependArray(current);\r\n        }\r\n    }\r\n}\r\n\r\n// 方法可单独使用 后面可以导出使用 所以不是 直接写在Observer类里面\r\n\r\nexport function defineReactive(target, key, value) {   // 闭包 属性劫持\r\n    // childOb.dep 用来收集依赖的\r\n    let childOb = observe(value); // 对所有的对象都进行属性劫持   递归的形式  只是对对象进行迭代劫持 数组没有\r\n    let dep = new Dep();  // 每个属性都有一个dep\r\n    // Object.defineProperty() 使用的是 defineReactive 的变量 即使用了外部数据 所以外不的数据 变量不能够被销毁  相当于形成闭包\r\n    // 不被销毁是因为，get set监听事件是全局事件，不被销毁，内部函数保存着外部函数的作用域，所以外部函数有引用，也不会被销毁。coderwhy\r\n    Object.defineProperty(target, key, {\r\n        get() {   // 取值的时候 会执行get\r\n            // console.log('key', key);\r\n\r\n            if(Dep.target){\r\n                dep.depend();  // 让这个属性的收集器记住当前，的watcher\r\n                if(childOb){\r\n                    childOb.dep.depend(); // 让数组和对象本身也实现依赖收集\r\n\r\n                    if(Array.isArray(value)){\r\n                        dependArray(value)\r\n                    }\r\n                }\r\n            }\r\n\r\n            return value\r\n        },\r\n        set(newValue) {   // 修改的时候 会执行\r\n            if (newValue === value) return  // 做判断减少性能损耗  赋值性能损耗大\r\n            observe(newValue)    // 修改后继续劫持\r\n            value = newValue\r\n            dep.notify(); // 通知更新\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport function observe(data) {\r\n    // 对这个对象进行劫持\r\n    if (typeof data !== \"object\" || data == null) {  // 如果是函数在state.js已经将this指向实例对象了   或语句 \r\n        return; // 只对对象进行劫持\r\n    }\r\n    if(data.__ob__ instanceof Observer){    // 说明这个对象已经被代理过了\r\n        return data.__ob__;\r\n    }\r\n    // 如果一个对象劫持过了，那就不需要再被劫持了 （要判断一个对象是否被劫持过，可以添加一个实例，用实例来判断是否被劫持过）\r\n\r\n    return new Observer(data);\r\n}","import Dep from \"./observe/dep\";\r\nimport { observe } from \"./observe/index\";\r\nimport Watcher, { nextTick } from \"./observe/watcher\";\r\n\r\nexport function initState(vm) {\r\n    const opts = vm.$options;\r\n    if (opts.data) {\r\n        initData(vm);\r\n    }\r\n    if (opts.computed) {\r\n        initComputed(vm);\r\n    }\r\n    if (opts.watch) {\r\n        initWatch(vm);\r\n    }\r\n}\r\n\r\nfunction initWatch(vm) {\r\n    let watch = vm.$options.watch;\r\n\r\n    for (let key in watch) {\r\n        const handler = watch[key];  // 字符串 数组 函数\r\n\r\n        if (Array.isArray(handler)) {\r\n            for (let i = 0; i < handler.length; i++) {\r\n                createWatcher(vm, key, handler[i]);\r\n            }\r\n        } else {\r\n            createWatcher(vm, key, handler);\r\n        }\r\n    }\r\n}\r\nfunction createWatcher(vm, key, handler) {\r\n    // 字符串 数组 函数\r\n    if (typeof handler === 'string') {\r\n        handler = vm[handler];\r\n    }\r\n    return vm.$watch(key, handler)\r\n}\r\n\r\n\r\n// vm 代理 vm._data\r\nfunction proxy(vm, target, key) {\r\n    Object.defineProperty(vm, key, {\r\n        get() {\r\n            return vm[target][key];\r\n        },\r\n        set(newValue) {\r\n            vm[target][key] = newValue\r\n        }\r\n    })\r\n}\r\n\r\nfunction initData(vm) {\r\n    let data = vm.$options.data;    // data可能是函数和对象  \r\n\r\n    data = typeof data === 'function' ? data.call(vm) : data;  // data.call(this) 使this指向实例对象 html new的Vue 或者使用vm 代替\r\n    // data.call(vm)  将函数转换为对象 之所以使用 .call() 直接使用data() this指向全局 数据泄露\r\n    // data 是用户返回的对象\r\n    // 根实例可以是对象也可以的函数 组件就只能的是函数\r\n\r\n    vm._data = data  // 将用户返回的对象放到 _data上\r\n\r\n    // 对数据进行劫持 vue2 里采用了一个api defineProperty\r\n\r\n    observe(data)\r\n\r\n    // 将vm._data 用vm代理就可以了\r\n    for (let key in data) {\r\n        proxy(vm, '_data', key);\r\n    }\r\n}\r\n\r\nfunction initComputed(vm) {\r\n    const computed = vm.$options.computed;\r\n    const watchers = vm._computedWatchers = {}; // 将计算属性的watcher保存到vm上\r\n\r\n    for (let key in computed) {\r\n        let userDef = computed[key];\r\n\r\n        // 我们需要监控 计算属性中的个体变化\r\n        let fn = typeof userDef === 'function' ? userDef : userDef.get;\r\n\r\n        // 如果直接new Watcher 默认就会执行fn,将属性和watcher对应起来\r\n        watchers[key] = new Watcher(vm, fn, { lazy: true })\r\n\r\n        defineComputed(vm, key, userDef)\r\n    }\r\n}\r\nfunction defineComputed(target, key, userDef) {\r\n    // const getter = typeof userDef === 'function' ? userDef : userDef.get;\r\n    const setter = userDef.set || (() => { });\r\n\r\n    // 可以通过实例拿到对应的属性\r\n    Object.defineProperty(target, key, { // 这里直接将computed的方法或者属性直接挂载到vm实例上可以直接调用 而且是响应式 可以vm. 调用\r\n        get: createComputedGetter(key),\r\n        set: setter\r\n    })\r\n}\r\n\r\n// 计算属性根本不会收集依赖，只会让自己的依赖属性去收集依赖\r\nfunction createComputedGetter(key) {\r\n    // 我们需要检测是否要执行这个getter\r\n    return function () {\r\n        const watcher = this._computedWatchers[key];  // 获取到对应属性的watcher\r\n        if (watcher.dirty) {\r\n            // 如果是脏的就去执行 用户传入的函数\r\n            watcher.evaluate(); // 求值后dirty变为false,下次就不求值\r\n        }\r\n        if (Dep.target) { // j计算属性出栈后 还要渲染watcher, 我们应该让计算属性watcher里面的属性 也收集上一层watcher\r\n            watcher.depend();\r\n        }\r\n        return watcher.value;  // 最后返回的是watcher上的值\r\n    }\r\n}\r\n\r\nexport function initStateMixin(Vue) {\r\n    Vue.prototype.$nextTick = nextTick;\r\n    // 最终调用\r\n    Vue.prototype.$watch = function (exprOrFn, cb, options = {}) {\r\n        // console.log(exprOrFn,cb,options);\r\n\r\n        // firstname\r\n        // ()=>vm.firstname\r\n        // firstname的值变化了 直接执行cb函数即可\r\n        new Watcher(this, exprOrFn, { user: true }, cb)\r\n    }\r\n}\r\n","import { compileToFunction } from \"./compiler\";\r\nimport { callHook, mountComponent } from \"./observe/lifecycle\";\r\nimport { initState } from \"./state\";\r\nimport { mergeOptions } from \"./utils\";\r\n\r\nexport function initMixin(Vue) {  // 就是给Vue增加init方法的\r\n    Vue.prototype._init = function (options) {  // 用于初始化操作\r\n        // vue vm.$options 就是获取用户的配置\r\n\r\n        // 我们使用 vue的时候 $nextTick $data $attr.... 其实就是区分vue的自己的属性\r\n        const vm = this;  // Vue\r\n\r\n        // 我们定义的全局指令和过滤器.... 都会挂载到实例上\r\n        vm.$options = mergeOptions(this.constructor.options,options); // 将用户的选项挂载到实例上 this是实例this.constructor 就是Vue.options 就是全局的options\r\n\r\n\r\n        callHook(vm,'beforeCreate');\r\n        // 初始化状态，初始化属性，watcher\r\n        // 数据的初始化对用户的数据的处理  \r\n        initState(vm);\r\n\r\n        callHook(vm,'created');\r\n\r\n        if (options.el) {\r\n            vm.$mount(options.el);  // 实现数据的挂载\r\n        }\r\n    }\r\n    Vue.prototype.$mount = function (el) {\r\n        const vm = this;\r\n        el = document.querySelector(el);\r\n        // vm.$el = el\r\n        let ops = vm.$options\r\n\r\n        if (!ops.render) {   // 先进行查找有没有renderh函数\r\n            let template;  // 没有render看一下是否写了template, 没有template采用外部的template\r\n            if (!ops.template && el) {   // 没有写模板 但写了el\r\n                template = el.outerHTML;\r\n            } else {\r\n                if (el) {\r\n                    template = ops.template\r\n                }\r\n            }\r\n            // 写了template 就用 写的template\r\n            if (template) {\r\n                // 这里需要对模板进行编译\r\n                // console.log(template);\r\n                const render = compileToFunction(template);\r\n                // console.log(render);\r\n                ops.render = render;\r\n            }\r\n        }\r\n        // console.log( ops.render); // 最终就可以获取的render方法\r\n        mountComponent(vm, el); // 组件的挂载\r\n        // script 标签引用的vue.global.js 这个编译过程式在浏览器运行的\r\n        // runtime是不包含模板编译的，整个编译是打包的时候通过loader来转义.vue文件的，用runtime的时候不能使用template\r\n    }\r\n}\r\n","import { initGlobalAPI } from \"./globalAPI\";\r\nimport { initMixin } from \"./init\"\r\nimport { initLifeCycle } from \"./observe/lifecycle\";\r\nimport { initStateMixin } from \"./state\";\r\n\r\n// 模块化开发使用构造函数 而不是 class类\r\n\r\n//  将所有的方法都耦合在一起\r\nfunction Vue(options) {\r\n    this._init(options)\r\n}\r\n\r\ninitMixin(Vue);  // 扩展init方法\r\ninitLifeCycle(Vue); // vm._update vm._render\r\n\r\n\r\ninitGlobalAPI(Vue); // 全局api的实现\r\n\r\ninitStateMixin(Vue); // 实现nextTick $watch\r\n\r\n// ---------------------------------------------\r\n\r\n\r\n\r\n\r\nexport default Vue"],"names":["strats","LIFECYCLE","forEach","hook","p","c","concat","mergeOptions","parent","child","options","key","mergeField","hasOwnProperty","initGlobalAPI","Vue","mixin","ncname","qnameCapture","startTagOpen","RegExp","endTag","attribute","startTagClose","parseHTML","html","ElEMENT_TYPE","TEXT_TYPE","stack","currentParent","root","createASTElement","tag","attrs","type","children","start","node","push","chars","text","replace","end","pop","length","advance","n","substring","parseStartTag","match","tagName","attr","name","value","textEnd","indexOf","startTagMatch","endTagMatch","genProps","str","i","obj","split","item","JSON","stringify","slice","defaultTagRE","gen","codegen","test","tokens","lastIndex","exec","index","trim","join","genChildren","map","ast","code","compileToFunction","template","render","Function","createElementVNode","vm","data","vnode","createTextVNode","undefined","id","Dep","subs","target","addDep","watcher","update","pushTarget","popTarget","Watcher","exprOrFn","cb","renderWatcher","getter","deps","depsId","Set","lazy","dirty","user","get","dep","has","add","addSub","call","depend","queueWatcher","oldValue","newValue","queue","pending","flushSchedulerQueue","flushQueue","q","run","nextTick","callbacks","waiting","flushCallbacks","cbs","Promise","resolve","then","createElm","el","document","createElement","patchProps","appendChild","createTextNode","props","styleName","style","setAttribute","patch","oldVNode","isRealElement","nodeType","elm","parentElm","parentNode","newElm","insertBefore","nextSibling","removeChild","initLifeCycle","prototype","_update","$el","_c","arguments","_v","_s","_render","$options","mountComponent","updateComponent","callHook","handlers","handler","oldArrayProto","Array","newArrayProto","Object","create","methods","method","args","result","inserted","ob","__ob__","observeArray","notify","Observer","defineProperty","enumerable","isArray","__proto__","walk","keys","defineReactive","observe","dependArray","current","childOb","set","initState","opts","initData","computed","initComputed","watch","initWatch","createWatcher","$watch","proxy","_data","watchers","_computedWatchers","userDef","fn","defineComputed","setter","createComputedGetter","evaluate","initStateMixin","$nextTick","initMixin","_init","constructor","$mount","querySelector","ops","outerHTML"],"mappings":"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"}